#
# tmux configuration settings
#
#
# @author paolodedios
#
###############################################################################

###############################################################################
# Start tmux server, set global-options, window-options, and rebind keys
###############################################################################

start-server

###############################################################################
# On Mac OS X, launch reattach-to-user-namespace to enable copy-n-paste
###############################################################################

set-option -g default-command "reattach-to-user-namespace -l bash"

###############################################################################
# If you are using a 256 colour terminal, you will need to set the correct
# term in tmux.
###############################################################################

set-option -g default-terminal "screen-256color"

###############################################################################
# Set scroll back buffer to 10k lines
###############################################################################

set-option -g history-limit 10000

###############################################################################
# Set mode keys to use emacs style key bindings. The alternative is
# to use vi style key bindings
#  set-window-option -g mode-keys vi
###############################################################################

set-window-option -g mode-keys vi

###############################################################################
# Start window numbering at 1 and not 0
###############################################################################

set-option -g base-index 1

###############################################################################
# Set the title of the current window to something descriptive for the entire
# tmux session. This results in the current window being called
#  "1. neon-vm:0.0.0 emacsclient justinlilly@neon-vm:~"
###############################################################################

set-option -g set-titles on

# window number,program name, active(or not)
set-option -g set-titles-string '#H:#S.#I.#P #W #T'

###############################################################################
# Set status bar look and feel
###############################################################################

set-option -g status on
set-option -g status-left-length  60
set-option -g status-right-length 60

set-option -g status-interval 2

set-option -g status-bg black
set-option -g status-fg white
set-option -g status-attr bright

set-option -g status-right '#[fg=yellow]#(uptime | cut -d "," -f 2-)'
set-option -g status-left  '#[fg=green]#H[#S] '

###############################################################################
# Command message line colors
###############################################################################

set-option -g message-fg white
set-option -g message-bg black
set-option -g message-attr bright

###############################################################################
# Change the command hot-key prefix to something that is
# easier on the fingers (from C-a to C-x)
###############################################################################

set-option -g prefix C-x

###############################################################################
# Enable activity monitoring globally
###############################################################################

set-option -g visual-activity on

###############################################################################
# Set a visual signal if there is activity in a window
###############################################################################

set-window-option -g monitor-activity on

###############################################################################
# By default, all windows in a session are constrained to the size of
# the smallest client connected to that session, even if both clients
# are looking at different windows. It seems that in this particular case,
# Screen has the better default where a window is only  constrained in
# size if a smaller client is actively looking at it. This behaviour can be
# fixed by setting tmux's aggressive-resize option
###############################################################################

set-window-option -g aggressive-resize on

###############################################################################
# Automatically set window title
###############################################################################

set-window-option -g automatic-rename

###############################################################################
# Active window colors
###############################################################################

set-window-option -g window-status-current-bg red
set-window-option -g window-status-current-fg white
set-window-option -g window-status-current-attr bright

###############################################################################
# Default window colors
###############################################################################

set-window-option -g window-status-fg white
set-window-option -g window-status-bg black
set-window-option -g window-status-attr dim


###############################################################################
# Automatically set window title to the current process
###############################################################################

set-window-option -g automatic-rename

###############################################################################
# reload configuration file
###############################################################################

bind-key ! source-file ~/.tmux.conf ; display-message 'Reloaded ~/.tmux.conf'

###############################################################################
# Rebind the split window keys
###############################################################################

# Rebind split window
unbind-key %
bind-key \ split-window -h

unbind-key '"'
bind-key - split-window -v


###############################################################################
# C-x C-a for the Last Active Window
###############################################################################

bind-key C-a last-window

###############################################################################
# quit
###############################################################################

bind-key q confirm-before kill-server

###############################################################################
# displays
###############################################################################

bind-key * list-clients

###############################################################################
# redisplay (default key in tmux is 'r')
###############################################################################

bind-key r refresh-client

###############################################################################
# choose window/session
###############################################################################

bind-key "'" choose-window
bind-key '"' choose-session

###############################################################################
# navigate windows using 'h', 'l', and ctrl-h, ctrl-l (no prefix)
###############################################################################

bind-key -r    h select-window -t :-
bind-key -r    l select-window -t :+
bind-key -nr C-h select-window -t :-
bind-key -nr C-l select-window -t :+

###############################################################################
# navigate panes using 'j', 'k', and ctrl-j, ctrl-k (no prefix)
###############################################################################

bind-key -r    j select-pane -t :.-
bind-key -r    k select-pane -t :.+
bind-key -nr C-j select-pane -t :.-
bind-key -nr C-k select-pane -t :.+

###############################################################################
# Cycle to next pane
###############################################################################

bind-key -r Tab select-pane -t :.+

###############################################################################
# resize pane with arrow keys
# -r: can be repeated without pressing prefix
#     again (500ms after last '-r' action or prefix)
###############################################################################

# unbind-key Left  ; bind-key -r Left  resize-pane -L 2
# unbind-key Right ; bind-key -r Right resize-pane -R 2
# unbind-key Down  ; bind-key -r Down  resize-pane -D 2
# unbind-key Up    ; bind-key -r Up    resize-pane -U 2

###############################################################################
# swap panes
###############################################################################

unbind-key "C-o"
bind-key -r J swap-pane -D
bind-key -r K swap-pane -U

###############################################################################
# Pane "zooming"
#
# These bindings (C-x + and C-x -) are a “zoom” feature. Focused on a given
# pane, "C-x +" will promote the pane to be its own window. Then you can do
# OS-native mark and copy all you want, no panes to worry about. When you’re
# done, just use "C-x -" to turn the window back into a pane, right where it
# was before.
###############################################################################

unbind-key +
bind-key   + \
  new-window -d -n tmux-zoom 'clear && echo TMUX ZOOM && read' \;\
  swap-pane -s tmux-zoom.0 \;\
  select-window -t tmux-zoom

unbind-key _
bind-key   _ \
  last-window \;\
  swap-pane -s tmux-zoom.0 \;\
  kill-window -t tmux-zoom


###############################################################################
# enable/disable mouse mode to select and resize panes
###############################################################################

# Toggle mouse on with C-x m
bind-key m set-option -g mouse on  \; display-message 'Mouse: ON'

# Toggle mouse off with C-x M
bind-key M set-option -g mouse off \; display-message 'Mouse: OFF'

###############################################################################
# copy and paste within pane or window
###############################################################################

bind-key [ copy-mode
bind-key ] paste-buffer -s \015

###############################################################################
# list all paste buffers (default key is '#')
###############################################################################

bind-key b list-buffers

###############################################################################
# choose paste buffer to paste interactively (default key was '=')
###############################################################################

bind-key p choose-buffer

###############################################################################
# delete the most recently copied paste buffer of text (default key was '-')
###############################################################################

bind-key x delete-buffer

###############################################################################
# copy and paste using the vi key bindings. while in copy mode:
#   'v' will activate highlighting
#   'y' will capture the highlighted string
#
# vi-mode key bindings also allow selection with [SPACE] and capture
# with the [ENTER] key
###############################################################################

bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-selection

###############################################################################
# rebind C-c and C-v to use reattach-to-user-namespace
#
# copy-n-paste workflow:
#  1. Get into copy-mode C-x [
#  2. To highlight text, hit 'v'
#  3. After you have moved and some text is highlighted you can copy
#     into tmux buffer by hitting 'y'
#  4. Copy tmux buffer into system clipboard C-x C-c
#
###############################################################################

bind-key C-c run "tmux save-buffer - | reattach-to-user-namespace pbcopy"
bind-key C-v run "tmux set-buffer  - $(reattach-to-user-namespace pbpaste); tmux paste-buffer"

###############################################################################
# Mouse mode copy and paste shortcuts
#
# Start copy mode when scrolling up and exit when scrolling down to bottom.
# The "#{mouse_any_flag}" check just sends scrolls to any program running that
# has mouse support (like vim).
#
# @see https://github.com/tmux/tmux/issues/145
# @see https://github.com/NHDaly/tmux-better-mouse-mode
###############################################################################

bind-key -n WheelUpPane if-shell -F -t = \
     "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"

bind-key -n WheelDownPane select-pane -t = \; send-keys -M



###############################################################################
# Bind 'S' to prompt for a host name for SSH
###############################################################################

bind-key S command-prompt -p ssh: "new-window -n %1 'ssh %1'"
