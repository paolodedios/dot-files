#
# Configuration file for tmux >= 2.4
#
#
# @author paolodedios
#
###############################################################################

###############################################################################
#
# Set plugin PATH for tmux plugin manager
#
###############################################################################

set-environment -g TMUX_PLUGIN_MANAGER_PATH "${HOME}/.tmux.d/plugins/"

###############################################################################
#
# Set custom theme path
#
###############################################################################

set-environment -g TMUX_THEME_FILE "${HOME}/.tmux.d/theme/custom.tmuxtheme"
set-environment -g TMUX_THEME_CONFIG_FILE "${HOME}/.tmux.d/theme/custom.conf"

###############################################################################
#
# Load TPM plugins
# @see https://github.com/tmux-plugins/tpm
#
###############################################################################

set-option -g @plugin "tmux-plugins/tpm"
set-option -g @plugin "tmux-plugins/tmux-resurrect"
set-option -g @plugin "tmux-plugins/tmux-continuum"

###############################################################################
#
# TPM plugin configuration
#
###############################################################################

# Specify preferred tmux-ressurect save directory
# @see https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/save_dir.md
set-option -g @resurrect-dir '~/.tmux.d/resurrect'

# Enable restoration of pane contents
# @see https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs
#      /restoring_pane_contents.md
set-option -g @resurrect-capture-pane-contents 'on'

# Enable automatic restore of last saved environment when tmux server starts
# @see https://github.com/tmux-plugins/tmux-continuum
set-option -g @continuum-restore 'on'
set-option -g @continuum-save-interval '15'

###############################################################################
# On Mac OS X, launch reattach-to-user-namespace to enable process launching
# and have that process be attached to the per-user bootstrap namespace
#
# @see http://www.economyofeffort.com/
#      2013/07/29/reattach-to-user-namespace-the-fix-for-your-tmux-in-os-x-woes/
# #see https://superuser.com/questions/1114694/
#      on-macos-sierra-beta-5-using-iterm-2-and-tmux-i-have-lost-the-ability-to-copy-p
###############################################################################

set-option -g default-shell $SHELL
set-option -g default-command "reattach-to-user-namespace -l ${SHELL}"

###############################################################################
# If you are using a 256 colour terminal, you will need to set the correct
# term in tmux.
###############################################################################

set-option -g default-terminal "screen-256color"

###############################################################################
# Turn on xterm-keys so that additional function keys get escape sequences
###############################################################################

set-option -g xterm-keys on

###############################################################################
# Set scroll back buffer to 10k lines
###############################################################################

set-option -g history-limit 10000

###############################################################################
# Set mode keys to use emacs style key bindings. The alternative is
# to use vi style key bindings
#  set-window-option -g mode-keys vi
###############################################################################

set-window-option -g mode-keys vi

###############################################################################
# Start window numbering at 1 and not 0
###############################################################################

set-option -g base-index 1

###############################################################################
# Set the title of the current window to something descriptive for the entire
# tmux session. This results in the current window being called
#  "1. neon-vm:0.0.0 emacsclient justinlilly@neon-vm:~"
###############################################################################

set-option -g set-titles on

# window number,program name, active(or not)
set-option -g set-titles-string "#H:#S.#I.#P #W #T"

# renumber windows when a window is closed
set-option -g renumber-windows on

###############################################################################
# Enable status line
###############################################################################

set-option -g status on
set-option -g status-left-length  60
set-option -g status-right-length 60
set-option -g status-interval 10

###############################################################################
# Set default status bar look and feel
###############################################################################

set-option -g status-bg black
set-option -g status-fg white
set-option -g status-attr bright

set-option -g status-right "#[fg=yellow]#(uptime | cut -d ' ' -f 4-)"
set-option -g status-left  "#[fg=green]#H[#S] "

###############################################################################
# Command message line colors
###############################################################################

set-option -g message-fg white
set-option -g message-bg black
set-option -g message-attr bright

###############################################################################
# Change the command hot-key prefix to something that is
# easier on the fingers (from C-a to C-x)
###############################################################################

set-option -g prefix C-x

###############################################################################
# Enable activity monitoring globally
###############################################################################

set-option -g visual-activity on

###############################################################################
#
# Ensure pane numbering is consistent with window numbering
#
###############################################################################

set-window-option -g pane-base-index 1

###############################################################################
# Set a visual signal if there is activity in a window
###############################################################################

set-window-option -g monitor-activity on

###############################################################################
# By default, all windows in a session are constrained to the size of
# the smallest client connected to that session, even if both clients
# are looking at different windows. It seems that in this particular case,
# Screen has the better default where a window is only  constrained in
# size if a smaller client is actively looking at it. This behaviour can be
# fixed by setting tmux's aggressive-resize option
###############################################################################

set-window-option -g aggressive-resize on

###############################################################################
# Automatically set window title
###############################################################################

set-window-option -g automatic-rename

###############################################################################
# Active window colors
###############################################################################

set-window-option -g window-status-current-bg red
set-window-option -g window-status-current-fg white
set-window-option -g window-status-current-attr bright

###############################################################################
# Default window colors
###############################################################################

set-window-option -g window-status-fg white
set-window-option -g window-status-bg black
set-window-option -g window-status-attr dim

###############################################################################
# Automatically set window title to the current process
###############################################################################

set-window-option -g automatic-rename

###############################################################################
# reload configuration file
###############################################################################

bind-key ! source-file ~/.tmux.conf ; display-message "Reloaded ~/.tmux.conf"

###############################################################################
# Rebind the split window keys
###############################################################################

# Rebind split window
unbind-key %
bind-key \ split-window -h

unbind-key '"'
bind-key - split-window -v


###############################################################################
# C-x C-a for the Last Active Window
###############################################################################

bind-key C-a last-window

###############################################################################
# Set quit shortcut
###############################################################################

bind-key q confirm-before kill-server

###############################################################################
# List all tmux clients
###############################################################################

bind-key * list-clients

###############################################################################
# Redisplay/refresh window (default key in tmux is 'r')
###############################################################################

bind-key r refresh-client

###############################################################################
# Choose window/session
###############################################################################

bind-key "'" choose-window
bind-key '"' choose-session

###############################################################################
# Navigate windows using 'h', 'l', and ctrl-h, ctrl-l (no prefix)
###############################################################################

bind-key -r    h     select-window -t :-
bind-key -r    l     select-window -t :+
bind-key -nr C-h     select-window -t :-
bind-key -nr C-l     select-window -t :+
bind-key Tab         last-window

###############################################################################
# Navigate panes using 'j', 'k', and ctrl-j, ctrl-k (no prefix)
###############################################################################

bind-key -r    j     select-pane -t :.-  # cycle counter-clockwise
bind-key -r    k     select-pane -t :.+  # cycle clockwise
bind-key -nr C-j     select-pane -t :.-  # cycle counter-clockwise
bind-key -nr C-k     select-pane -t :.+  # cycle clockwise

###############################################################################
# Navigate panes using ctrl-arrow keys (no prefix)
###############################################################################

bind-key -nr C-Up    select-pane -U     # move up
bind-key -nr C-Down  select-pane -D     # move down
bind-key -nr C-Left  select-pane -L     # move left
bind-key -nr C-Right select-pane -R     # move right

###############################################################################
# Resize pane with Shift-[arrow keys]
#
# bind-key -r: can be repeated without pressing prefix
#     again (500ms after last '-r' action or prefix)
#
# @see mouse mode resizing
###############################################################################

bind-key -r S-Left   resize-pane -L 2
bind-key -r S-Right  resize-pane -R 2
bind-key -r S-Down   resize-pane -D 2
bind-key -r S-Up     resize-pane -U 2

###############################################################################
# Swap panes
#
# '>' : Swap current pane with the next one
# '<' : Swap current pane with the previous one
#
###############################################################################

unbind-key "C-o"
bind-key -r >  swap-pane -D
bind-key -r <  swap-pane -U

###############################################################################
# Enable/disable mouse mode to select and resize panes
###############################################################################

# Toggle mouse on/off with C-x m
bind-key m run-shell 'cat ${TMUX_THEME_FILE} | sh -s tmux_wrapper_toggle_mouse'

###############################################################################
# Copy and paste contents of paste buffer within pane or window
###############################################################################

bind-key [ copy-mode

###############################################################################
# List all paste buffers (default key is '#')
###############################################################################

bind-key b list-buffers

###############################################################################
# Choose paste buffer to paste interactively (default key was '=')
###############################################################################

unbind-key =
bind-key P choose-buffer

###############################################################################
# Choose/paste the top buffer from the paste buffer
###############################################################################

bind-key p paste-buffer -s \015

###############################################################################
# Delete the most recently copied paste buffer of text (default key was '-')
###############################################################################

bind-key x delete-buffer \; display-message "Deleted last paste buffer"

###############################################################################
# Copy and paste using the vi key bindings. while in copy-mode:
#   'v' will activate highlighting
#   'y' will capture the highlighted string
#
# vi-mode key bindings also activate hightlighting with [SPACE] and capture
# with the [ENTER] key
###############################################################################

bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi C-v send -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind-key -T copy-mode-vi H send -X start-of-line
bind-key -T copy-mode-vi L send -X end-of-line
bind-key -T copy-mode-vi Escape send -X cancel

###############################################################################
# Mouse mode copy and paste shortcuts
#
# Start copy mode when scrolling up and exit when scrolling down to bottom.
# The "#{mouse_any_flag}" check just sends scrolls to any program running that
# has mouse support (like vim).
#
# @see https://github.com/tmux/tmux/issues/145
# @see https://github.com/NHDaly/tmux-better-mouse-mode
###############################################################################

bind-key -n WheelUpPane if-shell -F -t = \
     "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"

bind-key -n WheelDownPane select-pane -t = \; send-keys -M

###############################################################################
# The 'f' key is bound by default to 'find and switch' to an existing window.
# Bind 'Ctrl-f' to find and switch to another tmux session
###############################################################################

bind-key C-f command-prompt -p find-session "switch-client -t %%"

###############################################################################
# Bind 'S' to prompt for a host name for SSH
###############################################################################

bind-key S command-prompt -p ssh: "new-window -n %1 'ssh %1'"

###############################################################################
# Bind 'U' to the urlview command
###############################################################################

bind-key U run-shell 'cat ${TMUX_THEME_FILE} | sh -s tmux_wrapper_urlview #{pane_id}'

###############################################################################
# Bind 'F' to the Facebook path picker command
###############################################################################

bind-key F run-shell 'cat ${TMUX_THEME_FILE} | sh -s tmux_wrapper_fpp #{pane_id}'

###############################################################################
#
# Load tpm and tmux plugins
#
###############################################################################

run-shell '${HOME}/.tmux.d/plugins/tpm/tpm'
run-shell '${HOME}/.tmux.d/plugins/tmux-resurrect/resurrect.tmux'
run-shell '${HOME}/.tmux.d/plugins/tmux-continuum/continuum.tmux'

###############################################################################
#
# Workaround for MacOS Yosemite specific issue:
# @see https://github.com/tmux-plugins/tmux-continuum/issues/1
# @see https://stackoverflow.com/questions/28652066
#      /backgrounding-a-process-with-ampersand-does-not-work-in-bash
#
###############################################################################

run-shell -b '${HOME}/.tmux.d/plugins/tmux-continuum/scripts/continuum_restore.sh'

###############################################################################
#
# Load custom theme options
#
###############################################################################

if "[ -f ${TMUX_THEME_CONFIG_FILE} ]" 'source ${TMUX_THEME_CONFIG_FILE}'

###############################################################################
#
# Apply configuration and status line theme overrides
#
###############################################################################

run-shell 'cat ${TMUX_THEME_FILE} | sh -s tmux_wrapper_apply_configuration'
