#!/bin/bash
#
# Exported Shell Variables
# ------------------------
#
# @author paolodedios
#
########################################################################################

########################################################################################
# Identify OS and Machine
########################################################################################

export OS=`uname -s | sed -e 's/  */-/g;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`
export OSVERSION=`uname -r`; OSVERSION=`expr "$OSVERSION" : '[^0-9]*\([0-9]*\.[0-9]*\)'`
export MACHINE=`uname -m | sed -e 's/  */-/g;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`
export PLATFORM="$MACHINE-$OS-$OSVERSION"
export NETIF=en0

######################################################################################
# Configure default editor
######################################################################################

# Make vim the default editor
export EDITOR="vim"

######################################################################################
# Host file env variables
######################################################################################

# Put list of remote hosts in ~/.hosts
export SYS_HOSTFILE=/etc/hosts
export MY_HOSTFILE=$HOME/.hosts

######################################################################################
# Command history customization
######################################################################################

export HISTSIZE=32768
export HISTFILESIZE=$HISTSIZE

# Avoid succesive duplicates in the bash command history
export HISTCONTROL=ignoredups

# Make some commands not show up in history
export HISTIGNORE="ls:ls *:cd:cd -:pwd;exit:date:* --help"

# Force bash to re-read the history file and then append commands to the history
# every time a prompt is shown, instead of after closing the session.
PROMPT_COMMAND='history -a'

# Donâ€™t clear the screen after quitting a manual page
export MANPAGER="less -X"

# Highlight section titles in manual pages
export LESS_TERMCAP_md="$ORANGE"

######################################################################################
# Directory marking and caching
# http://jeroenjanssens.com/2013/08/16/quickly-navigate-your-filesystem-from-the-command-line.html
######################################################################################

export MARKPATH=$HOME/.marks

######################################################################################
# Declare platform specific applications
######################################################################################

function setupWorkDevEnvironment()
{
    # Declare platform agnostic applications
    if [ -d $LOCAL_APP_HOME ]; then
        # Declare platform agnostic applications
        export PLAY_FRAMEWORK_VERSION=play-1.2.6
    fi

    # Add local applications to PATH
    if [ -d $LOCAL_APP_HOME/bin ]; then

        # Create Play! Framework PATH variable
        if [ -d $LOCAL_BIN_PATH/$PLAY_FRAMEWORK_VERSION ]; then
            export PLAY_FRAMEWORK_HOME=$LOCAL_BIN_PATH/$PLAY_FRAMEWORK_VERSION
        fi

        # Append platform agnostic tools to PATH
        export PATH=$PLAY_FRAMEWORK_HOME:$PATH
    fi
}

function setupLocalDevEnvironment()
{
    # Declare platform agnostic applications
    if [ -d $LOCAL_APP_HOME ]; then

        # Declare C toolchain [ Updated 01/10/2014 ]
        #
        # XCode     : https://developer.apple.com/xcode/
        #
        export CC=gcc
        export CXX=g++
        export FFLAGS="-ff2c"

        # Declare platform agnostic applications [ Updated 01/10/2014 ]
        #
        # JDK       : http://www.oracle.com/technetwork/java/javase/downloads/index.html
        # VisualVM  : http://visualvm.java.net/download.html
        # CSVkit    : http://csvkit.readthedocs.org/en/latest/
        #
        export JDK_VERSION=1.7.0
        export VISUALVM_VERSION=visualvm-1.3.6
        export CSVKIT_VERSION=csvkit-0.6.1

        # External Build Tool Dependencies [ Updated 01/10/2014 ]
        #
        # Nexus     : http://www.sonatype.org/nexus/go
        # TeamCity  : http://www.jetbrains.com/teamcity/
        #
        export NEXUS_VERSION=nexus-2.6.4-02
        export TEAMCITY_VERSION=teamcity-8.0.5

        # External Cloud Dependencies [ Updated 01/10/2014 ]
        #
        # EC2 Tools : http://aws.amazon.com/developertools/351
        # Cloudify  : http://www.cloudifysource.org/downloads/get_cloudify
        #
        export EC2_API_TOOLS_VERSION=aws-ec2-api-tools-1.6.12.0
        export CLOUDIFY_VERSION=gigaspaces-cloudify-2.6.2-ga

        # Set JAVA_HOME to JDK 7
        export JAVA_HOME=$(/usr/libexec/java_home -v $JDK_VERSION)

        # Set GRADLE_HOME
        export GRADLE_HOME=/opt/local/share/java/gradle
    fi

    # Add local applications to PATH
    if [ -d $LOCAL_APP_HOME/bin ]; then

         # Create local bin PATH variable
        export LOCAL_BIN_PATH=$LOCAL_APP_HOME/bin

        # Create CSVkit PATH variable
        if [ -d $LOCAL_BIN_PATH/$CSVKIT_VERSION ]; then
            export CSVKIT_HOME=$LOCAL_BIN_PATH/$CSVKIT_VERSION
        fi

        # Create VisualVM PATH variable
        if [ -d $LOCAL_BIN_PATH/$VISUALVM_VERSION ]; then
            export VISUALVM_HOME=$LOCAL_BIN_PATH/$VISUALVM_VERSION
        fi

        # Create package HOME env variable for Nexus
        if [ -d $LOCAL_BIN_PATH/$NEXUS_VERSION ]; then
            export NEXUS_HOME=$LOCAL_BIN_PATH/$NEXUS_VERSION
        fi

        # Create package HOME env variable for TeamCity
        if [ -d $LOCAL_BIN_PATH/$TEAMCITY_VERSION ]; then
            export TEAMCITY_HOME=$LOCAL_BIN_PATH/$TEAMCITY_VERSION
        fi

        # Create EC2 PATH variable
        if [ -d $LOCAL_BIN_PATH/$EC2_API_TOOLS_VERSION ]; then
            export EC2_HOME=$LOCAL_BIN_PATH/$EC2_API_TOOLS_VERSION
        fi

        # Create Cloudify PATH variable
        if [ -d $LOCAL_BIN_PATH/$CLOUDIFY_VERSION ]; then
            export CLOUDIFY_HOME=$LOCAL_BIN_PATH/$CLOUDIFY_VERSION
        fi

        # Create package HOME env variable for sourcecolon
        export SOURCECOLON_HOME=$LOCAL_BIN_PATH/sourcecolon

        # Create binary path groups
        export TOOLS_BIN_PATH=$CSVKIT_HOME:$VISUALVM_HOME/bin
        export CLOUD_TOOLS_BIN_PATH=$EC2_HOME/bin:$CLOUDIFY_HOME/bin

        # Append platform agnostic tools to PATH
        export PATH=$LOCAL_BIN_PATH:$TOOLS_BIN_PATH:$CLOUD_TOOLS_BIN_PATH:$PATH
    fi

    # Add local data and log folder to the path, if you have it.
    if [ -d $LOCAL_APP_HOME/var ]; then

        # Create local data PATH variable
        export LOCAL_LOG_PATH=$LOCAL_APP_HOME/var/log
        export LOCAL_DATA_PATH=$LOCAL_APP_HOME/var/data

        # Add work directory for Nexus
        export PLEXUS_NEXUS_WORK=$LOCAL_DATA_PATH/nexus

        # Add work directory for SourceColon
        export SOURCECOLON_SRC_ROOT=$LOCAL_DATA_PATH/sourcecolon
    fi

    # Declare personal projects directory
    if [ -d $HOME/$LOCAL_PROJECTS ]; then
        export PROJECT_HOME=$HOME/$LOCAL_PROJECTS
    fi
}

function setupPythonVirtualEnv()
{
    # Python virtual environment
    if [ -e `type -p virtualenvwrapper.sh` ]; then

        # virtualenv working directory
        export WORKON_HOME=$LOCAL_APP_HOME/bin/python/virtualenvs

        # make pip use the same directory for virtualenvs as virtualenvwrapper
        export PIP_VIRTUALENV_BASE=$WORKON_HOME

        # makes pip detect an active virtualenv and install to it, without
        # having to pass it the -E parameter
        export PIP_RESPECT_VIRTUALENV=true

        # ensure that all new environments are isolated from the system
        # site-packages directory by passing "no-site-packages" as the default
        # argument for virtualenv
        export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'

        # load virtualenv wrapper functions
        source virtualenvwrapper.sh > /dev/null 2>&1
    fi
}

if [ "$OS" = "darwin" ]; then

    # tmux sets the TMUX environment variable in tmux sessions, and sets TERM
    # to screen. This isn't a 100% reliable indicator (for example, you can't
    # easily tell if you're running screen inside tmux or tmux inside screen),
    # but it should be good enough in practice.
    if ! { [ -n "$TMUX" ]; } then
        export SYSTEM_PATH=$PATH
    else
        export SYSTEM_PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/MacGPG2/bin
    fi

    # MacPorts versions take precedence
    export PATH=/opt/local/bin:/opt/local/sbin:$SYSTEM_PATH

    # Locally configured, user-specific binaries
    export LOCAL_APP_HOME=~/Applications

    # Project directory
    export LOCAL_PROJECTS=~/Projects

    # Override XCode4/gcc tendency to use arch=PPC when building libraries
    export ARCHFLAGS="-arch x86_64"

    # Create command alias for lsregister
    export CORE_SERVICES_PATH=/System/Library/Frameworks/CoreServices.framework
    export LAUNCH_SERVICES_PATH=Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/
    export LS_REGISTER_PATH=$CORE_SERVICES_PATH/$LAUNCH_SERVICES_PATH

    # Increase the maximum number of open file descriptors to the max OSX limit
    ulimit -n 2048

    # Add tab completion for `defaults read|write NSGlobalDomain`
    # You could just use `-g` instead, but I like being explicit
    complete -W "NSGlobalDomain" defaults

    # Set up local python virtualenv variables
    setupPythonVirtualEnv

    # Set up local dev environment
    setupLocalDevEnvironment

    # Set up local dev environment
    setupWorkDevEnvironment

else

    # tmux sets the TMUX environment variable in tmux sessions, and sets TERM
    # to screen. This isn't a 100% reliable indicator (for example, you can't
    # easily tell if you're running screen inside tmux or tmux inside screen),
    # but it should be good enough in practice.
    if ! { [ -n "$TMUX" ]; } then
        export SYSTEM_PATH=$PATH
    else
        export SYSTEM_PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
    fi

    # Local packages take precedence
    export PATH=/opt/local/bin:/opt/local/sbin:$PATH

    # Locally configured, user-specific binaries
    export LOCAL_APP_HOME=~/apps

    # Project directory
    export LOCAL_PROJECTS=~/projects

    # Set up local python virtualenv variables
    setupPythonVirtualEnv

    # Set up local dev environment
    setupLocalDevEnvironment

    # Set up local dev environment
    setupWorkDevEnvironment

fi
