#!/bin/bash
#
# Exported Shell Variables
# ------------------------
#
# @author paolodedios
#
########################################################################################

########################################################################################
# Identify OS and Machine
########################################################################################

export OS=$(uname -s | sed -e 's/  */-/g;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/')
export OSVERSION=$(uname -r); OSVERSION=$(expr "$OSVERSION" : '[^0-9]*\([0-9]*\.[0-9]*\)')
export MACHINE=$(uname -m | sed -e 's/  */-/g;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/')
export PLATFORM="$MACHINE-$OS-$OSVERSION"
export NETIF=en0

########################################################################################
# Configure language variables
########################################################################################

# Prefer US English and use UTF-8
export LC_ALL="en_US.UTF-8"
export LANG="en_US"

########################################################################################
# Configure default editor
########################################################################################

# Make vim the default editor
export EDITOR="vim"

########################################################################################
# Host file env variables
########################################################################################

# Put list of remote hosts in $HOME/.hosts
export SYS_HOSTFILE=/etc/hosts
export MY_HOSTFILE=$HOME/.hosts

########################################################################################
# Command history customization
########################################################################################

export HISTSIZE=1048576
export HISTFILESIZE=$HISTSIZE

# Avoid succesive duplicates in the bash command history
export HISTCONTROL=ignoredups

# Make some commands not show up in history
export HISTIGNORE="ls:ls *:cd:cd -:pwd;exit:date:* --help"

# Force bash to re-read the history file and then append commands to the history
# every time a prompt is shown, instead of after closing the session.
PROMPT_COMMAND='history -a'

# Donâ€™t clear the screen after quitting a manual page
export MANPAGER="less -X"

# Highlight section titles in manual pages
export LESS_TERMCAP_md="$ORANGE"

########################################################################################
# Declare platform specific applications
########################################################################################

function set_shared_dev_environment_vars()
{
    # Add shared applications to PATH
    if [ -d $SHARED_APP_HOME/bin ]; then

         # Create shared bin PATH variable
        export SHARED_BIN_PATH=$SHARED_APP_HOME/bin

        # Prepend platform agnostic tools to PATH
        export PATH=$SHARED_BIN_PATH:$PATH
    fi

    # Add shared libraries to LIBRARY PATH
    if [ -d $SHARED_APP_HOME/lib ]; then

        # Create shared LIB_PATH variable
        export SHARED_LIB_PATH=$SHARED_APP_HOME/lib

        # Prepend platform agnostic libraries to LIBRARY_PATH
        if [ "$OS" = "darwin" ]; then
            export DYLD_FALLBACK_LIBRARY_PATH=$SHARED_LIB_PATH:$DYLD_FALLBACK_LIBRARY_PATH
        else
            # Standard Unix search path for shared libraries
            export LD_LIBRARY_PATH=$SHARED_LIB_PATH:$LD_LIBRARY_PATH
        fi
    fi

    # Add shared data and log folder to the path, if you have it.
    if [ -d $SHARED_APP_HOME/var ]; then

        # Create shared data PATH variable
        export SHARED_LOG_PATH=$SHARED_APP_HOME/var/log
        export SHARED_DATA_PATH=$SHARED_APP_HOME/var/data
    fi
}

function set_local_dev_environment_vars()
{
    # Declare personal projects directory
    if [ -d $LOCAL_PROJECTS ]; then
        export PROJECT_HOME=$LOCAL_PROJECTS
    fi

    # Declare platform agnostic applications
    if [ -d $LOCAL_APP_HOME ]; then

        # Declare C toolchain [ Updated 01/10/2014 ]
        #
        # XCode     : https://developer.apple.com/xcode/
        #
        export CC=gcc
        export CXX=g++
        export FFLAGS="-ff2c"

        # Declare platform agnostic applications [ Updated 12/04/2014 ]
        #
        # JDK       : http://www.oracle.com/technetwork/java/javase/downloads/index.html
        #
        export JDK_VERSION=1.8.0

        # Set JAVA_HOME to JDK 8
        export JAVA_HOME=$(/usr/libexec/java_home -v $JDK_VERSION)

        # Set GRADLE_HOME
        export GRADLE_HOME=/opt/local/share/java/gradle
    fi

    # Add shared applications to PATH
    if [ -d $LOCAL_APP_HOME/bin ]; then

         # Create shared bin PATH variable
        export LOCAL_BIN_PATH=$LOCAL_APP_HOME/bin

        # Prepend platform agnostic tools to PATH
        export PATH=$LOCAL_BIN_PATH:$PATH
    fi

    # Add shared libraries to LIBRARY PATH
    if [ -d $LOCAL_APP_HOME/lib ]; then

        # Create shared LIB_PATH variable
        export LOCAL_LIB_PATH=$LOCAL_APP_HOME/lib

        # Prepend platform agnostic libraries to LIBRARY_PATH
        if [ "$OS" = "darwin" ]; then
            export DYLD_FALLBACK_LIBRARY_PATH=$LOCAL_LIB_PATH:$DYLD_FALLBACK_LIBRARY_PATH
        else
            # Standard Unix search path for shared libraries
            export LD_LIBRARY_PATH=$LOCAL_LIB_PATH:$LD_LIBRARY_PATH
        fi
    fi

    # Add shared data and log folder to the path, if you have it.
    if [ -d $LOCAL_APP_HOME/var ]; then

        # Create shared data PATH variable
        export LOCAL_LOG_PATH=$LOCAL_APP_HOME/var/log
        export LOCAL_DATA_PATH=$LOCAL_APP_HOME/var/data

        # Add work directory for Packer.
        #
        # When debugging the packer build process, set the
        # environment variable PACKER_LOG=1. The log output
        # will be displayed via stdout but can be optionally
        # redirected to a file via PACKER_LOG_PATH
        #
        # http://www.packer.io/docs/other/debugging.html
        #
        export PACKER_CACHE_DIR=$LOCAL_DATA_PATH/packer/cache
        export PACKER_BUILD_DIR=$LOCAL_DATA_PATH/packer/build
    fi
}

function set_python_environment_vars()
{
    # Python virtual environment
    if [ -e $(type -p virtualenvwrapper.sh) ]; then

        # Set default virtualenv python version
        export VIRTUALENV_PYTHON_PATH="/opt/local/bin"
        export VIRTUALENV_PYTHON_VERSION="2.7"

        # Set virtualenv working directory
        export WORKON_HOME=$LOCAL_APP_HOME/bin/python/virtualenvs

        # Make pip use the same directory for virtualenvs as virtualenvwrapper
        export PIP_VIRTUALENV_BASE=$WORKON_HOME

        # Ensure that pip only runs if there is a virtualenv currently activated
        export PIP_REQUIRE_VIRTUALENV=true

        # Makes pip detect an active virtualenv and install to it, without
        # having to pass it the -E parameter
        export PIP_RESPECT_VIRTUALENV=true

        # Ensure that the MacPorts versions of Python and virtualenv are used
        # for all virtualenv sessions.
        export VIRTUALENVWRAPPER_PYTHON=$VIRTUALENV_PYTHON_PATH/python
        export VIRTUALENVWRAPPER_VIRTUALENV=$VIRTUALENV_PYTHON_PATH/virtualenv

        # Ensure that all new environments are isolated from the system
        # site-packages directory by passing "no-site-packages" as the default
        # argument for virtualenv
        export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'

        # Load Python virtualenv wrapper functions
        source virtualenvwrapper.sh > /dev/null 2>&1
    fi

    # NLTK data location used by the command
    #
    #    $ python -m nltk.downloader all
    #
    # to install corpora, models, and tokenizers
    #
    # @see http://www.nltk.org/data.html for details
    export NLTK_DATA=$HOME/.bin.local/var/data/nltk


    # SpaCy data location used by the command
    #
    #    $ python -m spacy.en.download all --force
    #
    export SPACY_DATA=$HOME/.bin.local/var/data/spacy
}

function set_c_environment_vars()
{
    if [ "$OS" = "darwin" ]; then
        # Override XCode4/gcc tendency to use arch=PPC when building libraries
        export ARCHFLAGS="-arch x86_64"

        # Default compiler flags that are safe to use with python and numpy extensions
        export CFLAGS="-arch i386 -arch x86_64"
        export FFLAGS="-m32 -m64"
        export LDFLAGS="-Wall -undefined dynamic_lookup -bundle -arch i386 -arch x86_64"
        export CC="gcc"
        export CXX="g++ -arch i386 -arch x86_64"
    else
        # Build only x86_64 architecture
        export CFLAGS="-v -Wall -m64"
        export CC="gcc"
        export CXX="g++"
    fi

}

function set_cuda_environment_vars()
{
    # The CUDA toolkit download will install the CUDA driver, CUDA toolkit
    # supplements and CUDA samples.
    #
    # CUDA Driver: This will install /Library/Frameworks/CUDA.framework and the
    # UNIX-compatibility stub /usr/local/cuda/lib/libcuda.dylib that refers to
    # it.
    #
    # CUDA Toolkit: The CUDA Toolkit supplements the CUDA Driver with compilers
    # and additional libraries and header files that are installed into
    # /Developer/NVIDIA/CUDA-6.5 by default. Symlinks are created in
    # /usr/local/cuda/ pointing to their respective files in
    # /Developer/NVIDIA/CUDA-6.5/. Previous installations of the toolkit will be
    # moved to /Developer/NVIDIA/CUDA-#.# to better support side-by-side
    # installations.
    #
    # CUDA Samples (read-only): A read-only copy of the CUDA Samples is
    # installed in /Developer/NVIDIA/CUDA-6.5/samples. Previous installations of
    # the samples will be moved to /Developer/NVIDIA/CUDA-#.#/samples to better
    # support side-by-side installations.
    #
    # @see http://docs.nvidia.com/cuda/index.html
    #
    if [ "$OS" = "darwin" ]; then
        #
        # The macOS CUDA installer places the library in /Developer/NVIDIA/CUDA-X.X.
        # The following path, /opt/local/cuda should symlink to the real path in
        # /Developer.
        #
        export LOCAL_CUDA_HOME=/opt/local/cuda
        export LOCAL_CUDA_PATH=$LOCAL_CUDA_HOME/bin
        export LOCAL_CUDA_LIBRARY_PATH=$LOCAL_CUDA_HOME/lib

        if [ -d $LOCAL_CUDA_PATH -a -d $LOCAL_CUDA_LIBRARY_PATH ]; then
            export PATH=$LOCAL_CUDA_PATH:$PATH
            export DYLD_FALLBACK_LIBRARY_PATH=$LOCAL_CUDA_LIBRARY_PATH:$DYLD_FALLBACK_LIBRARY_PATH
        fi

    else
        export LOCAL_CUDA_HOME=/usr/local/cuda
        export LOCAL_CUDA_PATH=$LOCAL_CUDA_HOME/bin
        export LOCAL_CUDA_LIBRARY_PATH=$LOCAL_CUDA_HOME/lib64

        if [ -d $LOCAL_CUDA_PATH -a -d $LOCAL_CUDA_LIBRARY_PATH ]; then
            export PATH=$LOCAL_CUDA_PATH:$PATH
            export LD_LIBRARY_PATH=$LOCAL_CUDA_LIBRARY_PATH:$LD_LIBRARY_PATH
        fi
    fi
}

function set_go_lang_environment_vars()
{
    # Declare personal projects directory
    if [ -d $LOCAL_PROJECTS ]; then
        export GO_PROJECT_HOME=$LOCAL_PROJECTS
    else
        export GO_PROJECT_HOME=$HOME
    fi

    # Set the top level GOPATH environment variable
    # @see https://golang.org/doc/code.html#Workspaces
    #
    export GOPATH=$GO_PROJECT_HOME/Go
    export PATH=$GOPATH/bin:$PATH
}

########################################################################################
# Export OS specific variables
########################################################################################

if [ "$OS" = "darwin" ]; then

    # tmux sets the TMUX environment variable in tmux sessions, and sets TERM
    # to screen. This isn't a 100% reliable indicator (for example, you can't
    # easily tell if you're running screen inside tmux or tmux inside screen),
    # but it should be good enough in practice.
    if ! { [ -n "$TMUX" ]; } then
        # TMUX session NOT active, set paths
        export SYSTEM_PATH=$PATH
    else
        # TMUX session active, preserve paths
        export SYSTEM_PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:/usr/local/MacGPG2/bin
    fi

    # MacPorts versions take precedence
    export PATH=/opt/local/bin:/opt/local/sbin:$SYSTEM_PATH

    # Local machine-specific binaries
    export LOCAL_APP_HOME=$HOME/.bin.local

    # Shared machine-agnostic binaries
    export SHARED_APP_HOME=$HOME/.bin.shared

    # Project directory
    export LOCAL_PROJECTS=$HOME/Projects

    # Create command alias for lsregister
    export CORE_SERVICES_PATH=/System/Library/Frameworks/CoreServices.framework
    export LAUNCH_SERVICES_PATH=Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/
    export LS_REGISTER_PATH=$CORE_SERVICES_PATH/$LAUNCH_SERVICES_PATH

    # Add the VMware ovftool to the PATH
    export VMWARE_COMMAND_PATH=/Applications/VMware\ Fusion.app/Contents/Library/
    export VMWARE_OVFTOOL_PATH=/Applications/VMware\ OVF\ Tool/
    export PATH=$PATH:$VMWARE_COMMAND_PATH:$VMWARE_OVFTOOL_PATH

    # Add the Matlab command line utils to the PATH
    export MATLAB_COMMAND_PATH=/Applications/MATLAB_R2014b.app/bin/
    if [ -e $MATLAB_COMMAND_PATH ] ; then
        export PATH=$PATH:$MATLAB_COMMAND_PATH
    fi

    # Mac OS X search path for shared libraries (from 'man dyld')
    #
    # DYLD_LIBRARY_PATH
    #   This is a colon separated list of directories that contain
    #   libraries. The dynamic linker searches these directories before
    #   it searches the default locations for libraries. It allows you
    #   to test new versions of existing libraries.
    #   For each library that a program uses, the dynamic linker looks
    #   for it in each directory in DYLD_LIBRARY_PATH in turn. If it
    #   still can't find the library, it then searches
    #   DYLD_FALLBACK_FRAMEWORK_PATH and DYLD_FALLBACK_LIBRARY_PATH in
    #   turn.
    #
    # DYLD_FALLBACK_LIBRARY_PATH
    #   This is a colon  separated  list  of  directories  that  contain
    #   libraries.  It is used as the default location for libraries not
    #   found  in  their  install  path.   By  default,  it  is  set  to
    #   $(HOME)/lib:/usr/local/lib:/lib:/usr/lib.
    #
    # The default library search path is only used if DYLD_FALLBACK_LIBRARY_PATH
    # is not set. Setting DYLD_FALLBACK_LIBRARY_PATH will cause the default
    # paths to be ignored, causing lots of problems. If the
    # DYLD_FALLBACK_LIBRARY_PATH is modified, then care must be taken to add the
    # defaults manually. (See man dlopen)
    #
    # Since the shared and local dev environment variables modify the
    # library search path via the DYLD_FALLBACK_LIBRARY_PATH, ensure that
    # it is always first set to the default paths.
    #
    export DYLD_FALLBACK_LIBRARY_PATH=$HOME/lib:/usr/local/lib:/lib:/usr/lib

else

    # tmux sets the TMUX environment variable in tmux sessions, and sets TERM
    # to screen. This isn't a 100% reliable indicator (for example, you can't
    # easily tell if you're running screen inside tmux or tmux inside screen),
    # but it should be good enough in practice.
    if ! { [ -n "$TMUX" ]; } then
        export SYSTEM_PATH=$PATH
    else
        export SYSTEM_PATH=/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
    fi

    # Local packages take precedence
    export PATH=$SYSTEM_PATH::/shared/bin:$HOME/.local/bin:$HOME/bin

    # Local machine-specific binaries
    export LOCAL_APP_HOME=$HOME/.local

    # Shared machine-agnostic binaries
    export SHARED_APP_HOME=$HOME/.shared

    # Project directory
    export LOCAL_PROJECTS=$HOME/Projects
fi


########################################################################################
# Export OS indepenedent environment variables
########################################################################################

#
# OS independent environment variables should be set after platform specific
# variables have already been defined and abstracted away
#

# Set shared dev environment variables
#
# Shared dev environment variables have precedence over system environment
# variables
set_shared_dev_environment_vars

# Set local dev environment variables
#
# Local dev environment variables have precedence over shared and system
# environment variables
set_local_dev_environment_vars

# Set local C/C++ build environment variables
#
# Local programming environment variables are set after shared and local
# environment dependencies are set
set_c_environment_vars

# Set local python virtualenv variables
#
# Local programming environment variables are set after shared and local
# environment dependencies are set
set_python_environment_vars

# Set CUDA, OpenCL and other toolkit environment variables
#
# Toolkits that may depend on shared or local environment variables go last
set_cuda_environment_vars

# Set local Go language environment variables
set_go_lang_environment_vars
