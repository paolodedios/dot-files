#!/bin/bash
#
# Exported Shell Variables
# ------------------------
#
# @author paolodedios
#
########################################################################################

########################################################################################
# Identify OS and Machine
########################################################################################

export OS=`uname -s | sed -e 's/  */-/g;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`
export OSVERSION=`uname -r`; OSVERSION=`expr "$OSVERSION" : '[^0-9]*\([0-9]*\.[0-9]*\)'`
export MACHINE=`uname -m | sed -e 's/  */-/g;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`
export PLATFORM="$MACHINE-$OS-$OSVERSION"
export NETIF=en0

######################################################################################
# Configure default editor
######################################################################################

# Make vim the default editor
export EDITOR="vim"

######################################################################################
# Host file env variables
######################################################################################

# Put list of remote hosts in ~/.hosts
export SYS_HOSTFILE=/etc/hosts
export MY_HOSTFILE=$HOME/.hosts

######################################################################################
# Command history customization
######################################################################################

export HISTSIZE=32768
export HISTFILESIZE=$HISTSIZE

# Avoid succesive duplicates in the bash command history
export HISTCONTROL=ignoredups

# Make some commands not show up in history
export HISTIGNORE="ls:ls *:cd:cd -:pwd;exit:date:* --help"

# Force bash to re-read the history file and then append commands to the history
# every time a prompt is shown, instead of after closing the session.
PROMPT_COMMAND='history -a'

# Donâ€™t clear the screen after quitting a manual page
export MANPAGER="less -X"

# Highlight section titles in manual pages
export LESS_TERMCAP_md="$ORANGE"

######################################################################################
# Directory marking and caching
# http://jeroenjanssens.com/2013/08/16/quickly-navigate-your-filesystem-from-the-command-line.html
######################################################################################

export MARKPATH=$HOME/.marks

######################################################################################
# Declare platform specific applications
######################################################################################

function setupLocalDevEnvironment()
{
    # Declare platform agnostic applications
    if [ -d $LOCAL_APP_HOME ]; then

        # Declare C toolchain [ Updated 01/10/2014 ]
        #
        # XCode     : https://developer.apple.com/xcode/
        #
        export CC=gcc
        export CXX=g++
        export FFLAGS="-ff2c"

        # Declare platform agnostic applications [ Updated 12/04/2014 ]
        #
        # JDK       : http://www.oracle.com/technetwork/java/javase/downloads/index.html
        #
        export JDK_VERSION=1.8.0

        # Set JAVA_HOME to JDK 8
        export JAVA_HOME=$(/usr/libexec/java_home -v $JDK_VERSION)

        # Set GRADLE_HOME
        export GRADLE_HOME=/opt/local/share/java/gradle
    fi

    # Add local applications to PATH
    if [ -d $LOCAL_APP_HOME/bin ]; then

         # Create local bin PATH variable
        export LOCAL_BIN_PATH=$LOCAL_APP_HOME/bin

        # Append platform agnostic tools to PATH
        export PATH=$LOCAL_BIN_PATH:$PATH
    fi

    # Add local data and log folder to the path, if you have it.
    if [ -d $LOCAL_APP_HOME/var ]; then

        # Create local data PATH variable
        export LOCAL_LOG_PATH=$LOCAL_APP_HOME/var/log
        export LOCAL_DATA_PATH=$LOCAL_APP_HOME/var/data

        # Add work directory for Packer.
        #
        # When debugging the packer build process, set the
        # environment variable PACKER_LOG=1. The log output
        # will be displayed via stdout but can be optionally
        # redirected to a file via PACKER_LOG_PATH
        #
        # http://www.packer.io/docs/other/debugging.html
        #
        export PACKER_CACHE_DIR=$LOCAL_DATA_PATH/packer/cache
        export PACKER_BUILD_DIR=$LOCAL_DATA_PATH/packer/build
    fi

    # Declare personal projects directory
    if [ -d $HOME/$LOCAL_PROJECTS ]; then
        export PROJECT_HOME=$HOME/$LOCAL_PROJECTS
    fi
}

function setupPythonVirtualEnv()
{
    # Python virtual environment
    if [ -e `type -p virtualenvwrapper.sh` ]; then

        # Set virtualenv working directory
        export WORKON_HOME=$LOCAL_APP_HOME/bin/python/virtualenvs

        # Make pip use the same directory for virtualenvs as virtualenvwrapper
        export PIP_VIRTUALENV_BASE=$WORKON_HOME

        # Ensure that pip only runs if there is a virtualenv currently activated
        export PIP_REQUIRE_VIRTUALENV=true

        # Makes pip detect an active virtualenv and install to it, without
        # having to pass it the -E parameter
        export PIP_RESPECT_VIRTUALENV=true

        # Ensure that the MacPorts versions of Python and virtualenv are used
        # for all virtualenv sessions.
        export VIRTUALENVWRAPPER_PYTHON=/opt/local/bin/python
        export VIRTUALENVWRAPPER_VIRTUALENV=/opt/local/bin/virtualenv

        # Ensure that all new environments are isolated from the system
        # site-packages directory by passing "no-site-packages" as the default
        # argument for virtualenv
        export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'

        # Load virtualenv wrapper functions
        source virtualenvwrapper.sh > /dev/null 2>&1
    fi
}

########################################################################################
# Export OS specific variables
########################################################################################

if [ "$OS" = "darwin" ]; then

    # tmux sets the TMUX environment variable in tmux sessions, and sets TERM
    # to screen. This isn't a 100% reliable indicator (for example, you can't
    # easily tell if you're running screen inside tmux or tmux inside screen),
    # but it should be good enough in practice.
    if ! { [ -n "$TMUX" ] }; then
        export SYSTEM_PATH=$PATH
    else
        export SYSTEM_PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/MacGPG2/bin
    fi

    # MacPorts versions take precedence
    export PATH=/opt/local/bin:/opt/local/sbin:$SYSTEM_PATH

    # Locally configured, user-specific binaries
    export LOCAL_APP_HOME=~/Applications

    # Project directory
    export LOCAL_PROJECTS=~/Projects

    # Override XCode4/gcc tendency to use arch=PPC when building libraries
    export ARCHFLAGS="-arch x86_64"

    # Create command alias for lsregister
    export CORE_SERVICES_PATH=/System/Library/Frameworks/CoreServices.framework
    export LAUNCH_SERVICES_PATH=Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/
    export LS_REGISTER_PATH=$CORE_SERVICES_PATH/$LAUNCH_SERVICES_PATH

    # Add the VMware ovftool to the PATH
    export VMWARE_COMMAND_PATH=/Applications/VMware\ Fusion.app/Contents/Library/
    export VMWARE_OVFTOOL_PATH=/Applications/VMware\ OVF\ Tool/
    export PATH=$PATH:$VMWARE_COMMAND_PATH:$VMWARE_OVFTOOL_PATH

    # Add the Matlab command line utils to the PATH
    export MATLAB_COMMAND_PATH=/Applications/MATLAB_R2014b.app/bin/
    if [ -e $MATLAB_COMMAND_PATH ] ; then
        export PATH=$PATH:$MATLAB_COMMAND_PATH
    fi

    # Set up local python virtualenv variables
    setupPythonVirtualEnv

    # Set up local dev environment
    setupLocalDevEnvironment

else

    # tmux sets the TMUX environment variable in tmux sessions, and sets TERM
    # to screen. This isn't a 100% reliable indicator (for example, you can't
    # easily tell if you're running screen inside tmux or tmux inside screen),
    # but it should be good enough in practice.
    if ! { [ -n "$TMUX" ] }; then
        export SYSTEM_PATH=$PATH
    else
        export SYSTEM_PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
    fi

    # Local packages take precedence
    export PATH=/opt/local/bin:/opt/local/sbin:$PATH

    # Locally configured, user-specific binaries
    export LOCAL_APP_HOME=~/Applications

    # Project directory
    export LOCAL_PROJECTS=~/Projects

    # Set up local python virtualenv variables
    setupPythonVirtualEnv

    # Set up local dev environment
    setupLocalDevEnvironment

fi

########################################################################################
# Export OS independent variables
########################################################################################

# Prefer US English and use UTF-8
export LC_ALL="en_US.UTF-8"
export LANG="en_US"
